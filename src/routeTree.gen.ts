/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetupRouteImport } from './routes/setup'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as PaywallRouteImport } from './routes/paywall'
import { Route as ExtendTrialRouteImport } from './routes/extend-trial'
import { Route as DesignSystemRouteImport } from './routes/design-system'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ClientsRouteImport } from './routes/clients'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AccountRecoveryRouteImport } from './routes/account-recovery'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth.callback'

const SetupRoute = SetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const PaywallRoute = PaywallRouteImport.update({
  id: '/paywall',
  path: '/paywall',
  getParentRoute: () => rootRouteImport,
} as any)
const ExtendTrialRoute = ExtendTrialRouteImport.update({
  id: '/extend-trial',
  path: '/extend-trial',
  getParentRoute: () => rootRouteImport,
} as any)
const DesignSystemRoute = DesignSystemRouteImport.update({
  id: '/design-system',
  path: '/design-system',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRecoveryRoute = AccountRecoveryRouteImport.update({
  id: '/account-recovery',
  path: '/account-recovery',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account-recovery': typeof AccountRecoveryRoute
  '/auth': typeof AuthRouteWithChildren
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/extend-trial': typeof ExtendTrialRoute
  '/paywall': typeof PaywallRoute
  '/products': typeof ProductsRoute
  '/profile': typeof ProfileRoute
  '/setup': typeof SetupRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account-recovery': typeof AccountRecoveryRoute
  '/auth': typeof AuthRouteWithChildren
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/extend-trial': typeof ExtendTrialRoute
  '/paywall': typeof PaywallRoute
  '/products': typeof ProductsRoute
  '/profile': typeof ProfileRoute
  '/setup': typeof SetupRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account-recovery': typeof AccountRecoveryRoute
  '/auth': typeof AuthRouteWithChildren
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/extend-trial': typeof ExtendTrialRoute
  '/paywall': typeof PaywallRoute
  '/products': typeof ProductsRoute
  '/profile': typeof ProfileRoute
  '/setup': typeof SetupRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account-recovery'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/extend-trial'
    | '/paywall'
    | '/products'
    | '/profile'
    | '/setup'
    | '/auth/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account-recovery'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/extend-trial'
    | '/paywall'
    | '/products'
    | '/profile'
    | '/setup'
    | '/auth/callback'
  id:
    | '__root__'
    | '/'
    | '/account-recovery'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/extend-trial'
    | '/paywall'
    | '/products'
    | '/profile'
    | '/setup'
    | '/auth/callback'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRecoveryRoute: typeof AccountRecoveryRoute
  AuthRoute: typeof AuthRouteWithChildren
  ClientsRoute: typeof ClientsRoute
  DashboardRoute: typeof DashboardRoute
  DesignSystemRoute: typeof DesignSystemRoute
  ExtendTrialRoute: typeof ExtendTrialRoute
  PaywallRoute: typeof PaywallRoute
  ProductsRoute: typeof ProductsRoute
  ProfileRoute: typeof ProfileRoute
  SetupRoute: typeof SetupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/paywall': {
      id: '/paywall'
      path: '/paywall'
      fullPath: '/paywall'
      preLoaderRoute: typeof PaywallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/extend-trial': {
      id: '/extend-trial'
      path: '/extend-trial'
      fullPath: '/extend-trial'
      preLoaderRoute: typeof ExtendTrialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/design-system': {
      id: '/design-system'
      path: '/design-system'
      fullPath: '/design-system'
      preLoaderRoute: typeof DesignSystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account-recovery': {
      id: '/account-recovery'
      path: '/account-recovery'
      fullPath: '/account-recovery'
      preLoaderRoute: typeof AccountRecoveryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCallbackRoute: AuthCallbackRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRecoveryRoute: AccountRecoveryRoute,
  AuthRoute: AuthRouteWithChildren,
  ClientsRoute: ClientsRoute,
  DashboardRoute: DashboardRoute,
  DesignSystemRoute: DesignSystemRoute,
  ExtendTrialRoute: ExtendTrialRoute,
  PaywallRoute: PaywallRoute,
  ProductsRoute: ProductsRoute,
  ProfileRoute: ProfileRoute,
  SetupRoute: SetupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
