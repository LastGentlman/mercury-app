/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DesignSystemRouteImport } from './routes/design-system'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ClientsRouteImport } from './routes/clients'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as ApiTestRouteImport } from './routes/api-test'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo.table'
import { Route as DemoStoreRouteImport } from './routes/demo.store'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'

const DesignSystemRoute = DesignSystemRouteImport.update({
  id: '/design-system',
  path: '/design-system',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTestRoute = ApiTestRouteImport.update({
  id: '/api-test',
  path: '/api-test',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStoreRoute = DemoStoreRouteImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api-test': typeof ApiTestRoute
  '/auth': typeof AuthRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api-test': typeof ApiTestRoute
  '/auth': typeof AuthRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api-test': typeof ApiTestRoute
  '/auth': typeof AuthRoute
  '/clients': typeof ClientsRoute
  '/dashboard': typeof DashboardRoute
  '/design-system': typeof DesignSystemRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-test'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-test'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/api-test'
    | '/auth'
    | '/clients'
    | '/dashboard'
    | '/design-system'
    | '/demo/store'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiTestRoute: typeof ApiTestRoute
  AuthRoute: typeof AuthRoute
  ClientsRoute: typeof ClientsRoute
  DashboardRoute: typeof DashboardRoute
  DesignSystemRoute: typeof DesignSystemRoute
  DemoStoreRoute: typeof DemoStoreRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/design-system': {
      id: '/design-system'
      path: '/design-system'
      fullPath: '/design-system'
      preLoaderRoute: typeof DesignSystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-test': {
      id: '/api-test'
      path: '/api-test'
      fullPath: '/api-test'
      preLoaderRoute: typeof ApiTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiTestRoute: ApiTestRoute,
  AuthRoute: AuthRoute,
  ClientsRoute: ClientsRoute,
  DashboardRoute: DashboardRoute,
  DesignSystemRoute: DesignSystemRoute,
  DemoStoreRoute: DemoStoreRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
